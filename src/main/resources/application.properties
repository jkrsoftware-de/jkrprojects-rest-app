# [start] Common Spring Boot-Configurations.
server.error.include-message=always
# [end] Common Spring Boot-Configurations.

# [start] Spring JPA-Configuration for the Database.
spring.datasource.initialization-mode=always
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://${DATABASE_ACCESS_HOSTNAME}/${DATABASE_NAME}
spring.datasource.username=${DATABASE_ACCESS_USERNAME}
spring.datasource.password=${DATABASE_ACCESS_PASSWORD}
# [end] Spring JPA-Configuration for the Database.

# [start] Spring Cloud AWS-Configuration.
cloud.aws.stack.auto = false
cloud.aws.region.static = eu-central-1
cloud.aws.region.auto = false
cloud.aws.credentials.access-key = ${AWS_ACCESS_KEY_ID}
cloud.aws.credentials.secret-key = ${AWS_SECRET_ACCESS_KEY}
# [end] Spring Cloud AWS-Configuration.

# [start] Authentication System-Configuration.
# Signing-Secret used for Creation of JWT-Tokens.
authentication-system.jwt-tokens.signing-secret = ${AUTHENTICATION_SYSTEM_JWT_TOKEN_SIGNING_SECRET}
# Lifetime for created JWT-Tokens in Milliseconds.
authentication-system.jwt-tokens.lifetime = 14400000
# System-Client Token for "jkr-personal-access"-Client.
authentication-system.system-client-tokens.jkr-personal-access = ${AUTHENTICATION_SYSTEM_SYSTEM_CLIENT_TOKEN_FOR_JKR_PERSONAL_ACCESS}
# [end] Authentication System-Configuration.
