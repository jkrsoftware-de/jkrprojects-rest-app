###### üåè ###### üí¨ ######
# All my public-accessible Software-Content aren't underlying any Software-License. It's Free-Software.
# You can use my Code as you want ‚Äî my only Wish is: mark me as Original-Creator of your Derivation. But you mustn't. :)
#
# My Intention of creating/publishing Free-Software is to help our Public Society.
# In this particular Case our newly-created "Computer-World". I mean everything regarding complex IT-Systems.
#
# made for jkrsoftware.de as Versioning- and Deployment-System.
# made with ‚ù§ by Jeremy Kr√ºger (jkr.one). üòä
###### üåè ###### üí¨ ######
version: '3'

# Configuration of Service-Containers.
services:

  ## Spring Boot-Application.
  springapp:
    build: .
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${SERVICE_NAME}-springapp.entrypoints=web"
      - "traefik.http.routers.${SERVICE_NAME}-springapp.rule=Host(`${SERVICE_HOST}`)"
      - "traefik.http.middlewares.${SERVICE_NAME}-springapp-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.${SERVICE_NAME}-springapp.middlewares=${SERVICE_NAME}-springapp-https-redirect"
      - "traefik.http.routers.${SERVICE_NAME}-springapp-secure.entrypoints=websecure"
      - "traefik.http.routers.${SERVICE_NAME}-springapp-secure.rule=Host(`${SERVICE_HOST}`)"
      - "traefik.http.routers.${SERVICE_NAME}-springapp-secure.tls=true"
      - "traefik.http.routers.${SERVICE_NAME}-springapp-secure.tls.certresolver=myresolver"
      - "traefik.http.routers.${SERVICE_NAME}-springapp-secure.service=${SERVICE_NAME}-springapp"
      - "traefik.http.services.${SERVICE_NAME}-springapp.loadbalancer.server.port=8080"
    environment:
      # Common Configuration.
      SPRING_PROFILES_ACTIVE: ${CURRENT_ENVIRONMENT}
      # AWS-Credentials.
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      # Database-Configuration.
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_ACCESS_HOSTNAME: 'database_postgres'
      DATABASE_ACCESS_USERNAME: ${DATABASE_ACCESS_USERNAME}
      DATABASE_ACCESS_PASSWORD: ${DATABASE_ACCESS_PASSWORD}
    networks:
      web:
      postgres:

  ## Postgres Database for the Spring Boot-App.
  database_postgres:
    image: postgres:13.4-alpine
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_ACCESS_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_ACCESS_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata"
    volumes:
      - 'postgres_data:/var/lib/postgresql/data'
    networks:
      postgres:

  ## PhpPgAdmin providing Web-Access to the Database.
  ## TODO: make it only accessible via VPN.
  database_phppgadmin:
    image: bitnami/phppgadmin:latest
    restart: unless-stopped
    environment:
      DATABASE_HOST: 'database_postgres'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${SERVICE_NAME}-phppgadmin.entrypoints=web"
      - "traefik.http.routers.${SERVICE_NAME}-phppgadmin.rule=Host(`${SERVICE_NAME}.db.jkr.one`)"
      - "traefik.http.middlewares.${SERVICE_NAME}-phppgadmin-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.${SERVICE_NAME}-phppgadmin.middlewares=${SERVICE_NAME}-phppgadmin-https-redirect"
      - "traefik.http.routers.${SERVICE_NAME}-phppgadmin-secure.entrypoints=websecure"
      - "traefik.http.routers.${SERVICE_NAME}-phppgadmin-secure.rule=Host(`${SERVICE_NAME}.db.jkr.one`)"
      - "traefik.http.routers.${SERVICE_NAME}-phppgadmin-secure.tls=true"
      - "traefik.http.routers.${SERVICE_NAME}-phppgadmin-secure.tls.certresolver=myresolver"
      - "traefik.http.routers.${SERVICE_NAME}-phppgadmin-secure.service=${SERVICE_NAME}-phppgadmin"
      - "traefik.http.services.${SERVICE_NAME}-phppgadmin.loadbalancer.server.port=8080"
    networks:
      web:
      postgres:

# Configuration of Logical Docker-Volumes.
volumes:
  postgres_data:

# Configuration of Logical Docker-Networks.
networks:
  web:
    external: true # the "web"-Network is managed by an Traefik-Deployment routing all my HTTP(S)-Traffic to my Service-Containers.
  postgres: